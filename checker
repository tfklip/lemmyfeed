<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lemmy Top Posts RSS Feed</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
        }
        .feed-info {
            background: #e8f4f8;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
        .error {
            background: #ffe6e6;
            color: #d00;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
        }
        .post {
            border-bottom: 1px solid #eee;
            padding: 15px 0;
        }
        .post-title {
            font-weight: bold;
            color: #0066cc;
            text-decoration: none;
        }
        .post-meta {
            color: #666;
            font-size: 0.9em;
            margin-top: 5px;
        }
        .instance-tag {
            background: #0066cc;
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.8em;
            margin-right: 10px;
        }
        .refresh-btn {
            background: #0066cc;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            display: block;
            margin: 20px auto;
        }
        .refresh-btn:hover {
            background: #0052a3;
        }
        .rss-link {
            text-align: center;
            margin: 20px 0;
        }
        .rss-link a {
            background: #ff6600;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 5px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸŒ± Lemmy Top Posts RSS Feed</h1>
        
        <div class="feed-info">
            <strong>Feed Sources:</strong> slrpnk.net + futurology.today<br>
            <strong>Content:</strong> Top posts from the last 7 days<br>
            <strong>RSS URL:</strong> <code id="rss-url">Loading...</code>
        </div>

        <div class="rss-link">
            <a href="#" id="rss-download" onclick="generateRSS()">ðŸ“¡ Generate RSS Feed</a>
        </div>

        <button class="refresh-btn" onclick="loadPosts()">ðŸ”„ Refresh Posts</button>

        <div id="loading" class="loading">Loading posts...</div>
        <div id="error" class="error" style="display: none;"></div>
        <div id="posts"></div>
    </div>

    <script>
        const INSTANCES = ['slrpnk.net', 'futurology.today'];
        let allPosts = [];

        async function fetchTopPosts(instance) {
            try {
                const response = await fetch(`https://${instance}/api/v3/post/list?sort=TopWeek&limit=25`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                
                return data.posts.map(post => ({
                    title: post.post.name,
                    url: post.post.url || `https://${instance}/post/${post.post.id}`,
                    body: post.post.body || '',
                    author: post.creator.name,
                    community: post.community.name,
                    instance: instance,
                    published: post.post.published,
                    score: post.counts.score,
                    comments: post.counts.comments,
                    id: `${instance}-${post.post.id}`
                }));
            } catch (error) {
                console.error(`Error fetching from ${instance}:`, error);
                return [];
            }
        }

        async function loadPosts() {
            const loadingDiv = document.getElementById('loading');
            const errorDiv = document.getElementById('error');
            const postsDiv = document.getElementById('posts');
            
            loadingDiv.style.display = 'block';
            errorDiv.style.display = 'none';
            postsDiv.innerHTML = '';
            allPosts = [];

            try {
                const promises = INSTANCES.map(instance => fetchTopPosts(instance));
                const results = await Promise.all(promises);
                
                // Combine all posts
                allPosts = results.flat();
                
                // Sort by score (descending)
                allPosts.sort((a, b) => b.score - a.score);
                
                // Take top 20 posts
                allPosts = allPosts.slice(0, 20);
                
                displayPosts();
                updateRSSUrl();
                
            } catch (error) {
                errorDiv.textContent = `Error loading posts: ${error.message}`;
                errorDiv.style.display = 'block';
            } finally {
                loadingDiv.style.display = 'none';
            }
        }

        function displayPosts() {
            const postsDiv = document.getElementById('posts');
            
            if (allPosts.length === 0) {
                postsDiv.innerHTML = '<p>No posts found.</p>';
                return;
            }

            postsDiv.innerHTML = allPosts.map(post => `
                <div class="post">
                    <span class="instance-tag">${post.instance}</span>
                    <a href="${post.url}" class="post-title" target="_blank">${post.title}</a>
                    <div class="post-meta">
                        by ${post.author} in ${post.community} â€¢ 
                        ${post.score} points â€¢ 
                        ${post.comments} comments â€¢ 
                        ${new Date(post.published).toLocaleDateString()}
                    </div>
                    ${post.body ? `<p style="margin-top: 10px; color: #666;">${post.body.substring(0, 200)}${post.body.length > 200 ? '...' : ''}</p>` : ''}
                </div>
            `).join('');
        }

        function updateRSSUrl() {
            const rssUrl = window.location.href.replace(/\/$/, '') + '?rss=true';
            document.getElementById('rss-url').textContent = rssUrl;
        }

        function generateRSS() {
            if (allPosts.length === 0) {
                alert('Please load posts first by clicking "Refresh Posts"');
                return;
            }

            const rssContent = generateRSSContent();
            const blob = new Blob([rssContent], { type: 'application/rss+xml' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = 'lemmy-top-posts.xml';
            a.click();
            
            URL.revokeObjectURL(url);
        }

        function generateRSSContent() {
            const now = new Date().toUTCString();
            const baseUrl = window.location.href.replace(/\/$/, '');
            
            let rssItems = allPosts.map(post => `
                <item>
                    <title><![CDATA[${post.title}]]></title>
                    <link>${post.url}</link>
                    <description><![CDATA[
                        <p><strong>From:</strong> ${post.instance} - ${post.community}</p>
                        <p><strong>By:</strong> ${post.author}</p>
                        <p><strong>Score:</strong> ${post.score} points | <strong>Comments:</strong> ${post.comments}</p>
                        ${post.body ? `<p>${post.body}</p>` : ''}
                    ]]></description>
                    <pubDate>${new Date(post.published).toUTCString()}</pubDate>
                    <guid>${post.id}</guid>
                </item>
            `).join('');

            return `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
    <channel>
        <title>Lemmy Top Posts - slrpnk.net + futurology.today</title>
        <description>Top weekly posts from slrpnk.net and futurology.today</description>
        <link>${baseUrl}</link>
        <lastBuildDate>${now}</lastBuildDate>
        <language>en</language>
        <generator>Lemmy RSS Generator</generator>
        ${rssItems}
    </channel>
</rss>`;
        }

        // Check if RSS is requested via URL parameter
        function checkRSSRequest() {
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('rss') === 'true') {
                loadPosts().then(() => {
                    const rssContent = generateRSSContent();
                    document.body.innerHTML = `<pre>${rssContent.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</pre>`;
                    document.contentType = 'application/rss+xml';
                });
            }
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            checkRSSRequest();
            if (!window.location.search.includes('rss=true')) {
                loadPosts();
            }
        });
    </script>
</body>
</html>
